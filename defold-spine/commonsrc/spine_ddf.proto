syntax = "proto2";
package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "script/ddf_script.proto";

option java_package = "com.dynamo.spine.proto";
option java_outer_classname = "Spine";

message SpineSceneDesc
{
    required string spine_json          = 1 [(resource)=true];
    required string atlas               = 2 [(resource)=true];
    optional float sample_rate          = 3 [default = 30.0]; // Deprecated
}

message SpineModelDesc
{
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
        BLEND_MODE_SCREEN    = 4 [(displayName) = "Screen"];
        BLEND_MODE_INHERIT   = 5 [(displayName) = "Inherit"];
    }

    required string spine_scene         = 1 [(resource)=true];
    required string default_animation   = 2;
    required string skin                = 3;
    optional BlendMode blend_mode       = 4 [default = BLEND_MODE_ALPHA];
    optional string material            = 5 [(resource)=true, default="/defold-spine/assets/spine.material"];
    optional bool create_go_bones       = 6 [default=false];
    optional float playback_rate        = 7 [default = 1.0];
    optional float offset               = 8 [default = 0.0];
}

enum MixBlend {
  MIX_BLEND_SETUP = 0;
  MIX_BLEND_FIRST = 1;
  MIX_BLEND_REPLACE = 2;
  MIX_BLEND_ADD = 3;
}

message SpinePlayAnimation
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in gameobject.h
    required uint32 playback = 2;
    optional float blend_duration = 3 [default = 0.0];
    optional float offset = 4 [default = 0.0];
    optional float playback_rate = 5 [default = 1.0];
    optional int32 track = 6 [default = 0];
    optional MixBlend mix_blend = 7 [default = MIX_BLEND_REPLACE];
}

/*# Spine model API documentation
 *
 * @document
 * @name Spine
 * @namespace spine
 */

/*# reports the completion of a Spine animation
 *
 * This message is sent when a Spine animation has finished playing back to the script
 * that started the animation.
 *
 * [icon:attention] No message is sent if a completion callback function was supplied
 * when the animation was started. No message is sent if the animation is cancelled with
 * model.cancel(). This message is sent only for animations that play with
 * the following playback modes:
 *
 * - `go.PLAYBACK_ONCE_FORWARD`
 * - `go.PLAYBACK_ONCE_BACKWARD`
 * - `go.PLAYBACK_ONCE_PINGPONG`
 *
 * @message
 * @name spine_animation_done
 * @param animation_id [type:hash] the id of the completed animation
 * @param playback [type:constant] the playback mode of the completed animation
 * @param track [type:number] the playback mode of the completed animation
 * @examples
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_animation_done") then
 *     if message.animation_id == hash("run") and message.playback == go.PLAYBACK_ONCE_FORWARD then
 *       -- The animation "run" has finished running forward.
 *     end
 *   end
 * end
 * ```
 */
message SpineAnimationDone
{
    required uint64 animation_id = 1;
    // matches dmGameObject::Playback in dmsdk/gameobject/gameobject.h
    required uint32 playback = 2;
    required int32 track = 3 [default = 0];
}

message SpineCancelAnimation
{
    optional int32 track = 1 [default = -1];
}

/*# reports an incoming event from the Spine animation
 *
 * This message is sent when Spine animation playback fires events. These events
 * has to be defined on the animation track in the Spine animation editor. An event
 * can contain custom values expressed in the fields `integer`, `float` and `string`.
 *
 * @message
 * @name spine_event
 * @param event_id [type:hash] the id of the event.
 * @param animation_id [type:hash] the id of the animation.
 * @param t [type:number] the time of the event in seconds, relative to the start of the animation.
 * @param blend_weight [type:number the blend weight (between 0.0-1.0) of the current animation at time t.
 * @param integer [type:number] user defined integer value for the event
 * @param float [type:number] user defined floating point value for the event
 * @param string [type:hash] user defined string value (hashed) for the event
 * @param node [type:node] the source spine gui node if the event originated from gui, otherwise nil
 * @examples
 *
 * The following example assumes that an animation sends event messages with the id `"footstep"`
 * and that the `integer` field is used to distinguish between left and right foot (values 0 and 1).
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *   if message_id == hash("spine_event") then
 *     -- Receiving animation event from Spine. Play footsteps.
 *     if message.event_id == hash("footstep") and message.integer == 0 then
 *       msg.post("#sound_footstep_right", "play_sound")
 *     elseif message.event_id == hash("footstep") and message.integer == 1 then
 *       msg.post("#sound_footstep_left", "play_sound")
 *   end
 * end
 * ```
 */
message SpineEvent
{
    required uint64 event_id = 1;
    required uint64 animation_id = 2;
    required float t = 3;
    required float blend_weight = 4;
    required int32 track = 5 [default = 1];
    optional int32 integer = 6 [default = 0];
    optional float float = 7 [default = 0.0];
    optional uint64 string = 8 [default = 0];
    optional dmScriptDDF.LuaRef node = 9;
}
