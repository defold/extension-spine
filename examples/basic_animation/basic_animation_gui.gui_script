
local function play_gui_animation(self)
	gui.play_spine_anim(self.spine_node, "run", gui.PLAYBACK_LOOP_FORWARD, {})
	self.is_playing = true
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.countdown = 2
	
	-- Get GUI node references
	self.spine_node = gui.get_node("spine_node")
	self.ik_target = gui.get_node("ik_target")
	self.title = gui.get_node("title")
	
	-- Basic animation setup - same as GO version
	gui.play_spine_anim(self.spine_node, "idle", gui.PLAYBACK_LOOP_FORWARD)
	gui.set_spine_skin(self.spine_node, hash("default"))
	
	-- Properties demonstration - same as GO version  
	print("GUI Properties")
	print("current animation:", gui.get_spine_animation(self.spine_node))
	print("current skin:", gui.get_spine_skin(self.spine_node))
	gui.set_spine_skin(self.spine_node, hash("default"))
	gui.set_spine_skin(self.spine_node, hash(""))
	
	-- Attachments - same as GO version
	gui.set_spine_attachment(self.spine_node, "mouth", "mouth-smile")
	
	-- Bones - GUI version gets bone nodes instead of game objects
	local bone_node = gui.get_spine_bone(self.spine_node, "gun-tip")
	print("bone node", bone_node)
	self.bone_node = bone_node
	
	-- Multi-track animation - same as GO version
	gui.play_spine_anim(self.spine_node, "idle", gui.PLAYBACK_LOOP_FORWARD, { track = 1 })
	gui.play_spine_anim(self.spine_node, "aim", gui.PLAYBACK_LOOP_FORWARD, { track = 2 })
	
	-- Set IK target to follow the ik_target GUI node (equivalent to GO version)
	gui.set_spine_ik_target(self.spine_node, "aim-ik", self.ik_target)
	self.ik_mode = "follow" -- track current IK mode
	
	print("GUI IK setup complete - move mouse to control aim")
	print("Controls:")
	print("  Mouse movement: IK follows red target")
	print("  Space: Set IK to fixed position")
	print("  R: Reset IK target")
	print("  Left click: Shoot")
	print("  Right click: Toggle run animation")
end

function final(self)
end

function update(self, dt)
	self.countdown = self.countdown - 1
	if self.countdown == 0 then
		-- gui.cancel_spine(self.spine_node) -- equivalent to spine.cancel
	end
end

function on_message(self, message_id, message, sender)
	pprint("GUI message", message_id, message)
end

function on_input(self, action_id, action)
	if action_id == nil then
		self.mouse_pos = vmath.vector3(action.x, action.y, 0)
		-- Move the IK target GUI node to follow mouse (only in follow mode)
		if self.ik_mode == "follow" then
			gui.set_position(self.ik_target, vmath.vector3(action.x, action.y, 0))
		end
	elseif action_id == hash("mouse_button_right") and action.pressed then
		if self.is_playing then
			gui.cancel_spine(self.spine_node, { track = 1 })
			self.is_playing = false
		else
			play_gui_animation(self)
		end
	elseif action_id == hash("mouse_button_left") and action.pressed then
		gui.play_spine_anim(self.spine_node, "shoot", gui.PLAYBACK_ONCE_FORWARD, { track = 3 })
	elseif action_id == hash("key_space") and action.pressed then
		-- Test position-based IK (new functionality)
		gui.set_spine_ik_target_position(self.spine_node, "aim-ik", self.mouse_pos)
		self.ik_mode = "fixed"
		-- Change target color to indicate fixed mode
		gui.set_color(self.ik_target, vmath.vector4(0, 0, 1, 1)) -- blue for fixed
	elseif action_id == hash("key_r") and action.pressed then
		-- Reset IK target and return to follow mode
		gui.reset_spine_ik_target(self.spine_node, "aim-ik")
		gui.set_spine_ik_target(self.spine_node, "aim-ik", self.ik_target)
		self.ik_mode = "follow"
		-- Change target color back to red for follow mode
		gui.set_color(self.ik_target, vmath.vector4(1, 0, 0, 1)) -- red for follow
		print("Reset IK target - back to follow mode")
	end
end

function on_reload(self)
end 